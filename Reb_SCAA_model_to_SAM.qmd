---
title: "Beaked redfish exploratory models: SCAA to SAM model conversion"
subtitle: "Exploratory models for the Northeast Arctic beaked redfish"
# author:
#    - name: Mikko Vihtakari
#      affiliations:
#       - ref: imr
# affiliations: 
#    - id: imr 
#      name: Institute of Marine Research, Norway
date: today
published-title: "Version"
format:
  html:
    self-contained: true
    fig-width: 9
    fig-height: 6
    code-fold: true
    # output-file: Reb_SCAA_model_to_SAM_v1
    toc: true
bibliography: "/Users/a22357/ownCloud/Workstuff/Literature/Mendeley/bibtex/zotero_library.bib"
csl: "docs/ices_jms.csl"
execute:
  message: false
  warning: false
  cache: false
editor_options: 
  chunk_output_type: console
---

```{r setup, eval = TRUE, include = FALSE}
options(knitr.kable.NA = '')
# knitr::opts_knit$set(root.dir = '../../') 

knitr::knit_hooks$set(timeit = local({
  now = NULL
  function(before, options) {
    if (before) {
      now <<- Sys.time()
    } else {
      res = round(difftime(Sys.time(), now, units = "mins"), 1)
      now <<- NULL
      # use options$label if you want the chunk label as well
      print(paste('Time:', as.character(res), "min"))
    }
  }})
)
```

```{r packages, timeit = TRUE}
# Clear the workspace for manual code runs

rm(list = ls()) 

############## ####
#### Libraries ----

## Package names
packages <- c("tidyverse", "stockassessment", "scales", "cowplot",
              "lubridate")

## Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())

# if("remotes" %in% packages[!installed_packages]) {
#   install.packages("remotes")
# }

if (any(installed_packages == FALSE)) {
  
  if("stockassessment" %in% packages[!installed_packages]) {
    install.packages('stockassessment',
                     repos=c(CRAN="https://cloud.r-project.org/",
                             SAM='https://fishfollower.r-universe.dev'))
  }
  
  installed_packages <- packages %in% rownames(installed.packages())
  
  install.packages(packages[!installed_packages])
}

## Load packages
invisible(lapply(packages, library, character.only = TRUE))

# Backend for parallel

if(Sys.info()["sysname"] == "Linux") {
  library(flexiblas)
  flexiblas_switch(flexiblas_load_backend("OPENBLAS-THREADS"))
}

################### ###
# Custom functions ----

source("R/make_table.R") # a function to make tables

################ ##
# ggplot theme ----

theme_cust <- theme_classic(base_size = 10) %+replace%
  theme(strip.background = element_blank(),
        panel.background = element_blank(),
        plot.background = element_blank(),
        legend.background = element_blank(),
        legend.box.background = element_blank(),
        plot.margin = margin(c(5.5, 10, 5.5, 5.5)))

theme_set(theme_cust) # Set default theme globally for the entire project
```


# Introduction

This document contains exploratory conversion of the [Statistical Catch at Age (SCAA) model](https://ices-library.figshare.com/articles/report/Report_of_the_Benchmark_Workshop_on_Redfish_Stocks_WKREDFISH_/19291142/1?file=36604434) [@ices2018] used in the assessment of the [Northeast Arctic beaked redfish stock](https://www.hi.no/en/hi/temasider/species/redfish/beaked-redfish-in-the-barents-and-norwegian-seas) until 2024 to a SAM assessment model. 

# Data

The data are reformatted from direct input data for the SCAA model. 

## Datasets

### Catches

```{r}
#| label: fig-catches
#| fig-cap: Catches by age (fill) for each fleet presumably in millions. Actual catch numbers in the data have been divided by 1000.
# #| fig-height: 

### Catches ####

cn <- 
  list("demersal" = 
         read_table("data/from scaa model/CatchAtAge.txt") %>% 
         column_to_rownames("Year") %>% 
         setNames(gsub("\\+", "", colnames(.))) %>% 
         as.matrix(),
       "pelagic" = 
         read_table("data/from scaa model/PelagicCatchAtAge.txt") %>% 
         column_to_rownames("Year") %>% 
         setNames(gsub("\\+", "", colnames(.))) %>% 
         as.matrix()
  )

## ####

lapply(seq_along(cn), function(i) {
  as_tibble(cn[[i]], rownames = "year") %>% 
    pivot_longer(-year) %>% 
    add_column(type = names(cn)[i], .before = 1)
}) %>% bind_rows() %>% 
  mutate(
    name = 
      factor(name, 
             rev(as.integer(unique(name)))),
    year = as.integer(year)) %>% 
  ggplot(aes(x = year, y = value/1e3, fill = name)) +
  geom_col() +
  facet_wrap(~type, ncol = 1) +
  scale_fill_viridis_d() +
  scale_y_continuous(expand = expansion(mult = c(0, .1))) +
  labs(x = "Year", y = "Catch-at-age (millions?)", fill = "Age")

## ####
```

### Surveys

```{r}
#| label: fig-surveys
#| fig-cap: Survey data by age (fill). The unit is unclear. Individuals?
#| fig-height: 8

### Surveys ####

survey_names <- c("EcosystemSurvey", "WinterSurvey", "RussianSurvey", "WGIDEEPS")

surveys <- setNames(
  lapply(survey_names, function(k){
    # print(k)
    
    out <- read_table(paste0("data/from scaa model/", k, ".txt"),
                      show_col_types = FALSE) %>%
      filter(Year > 1991) %>% 
      setNames(gsub("\\+", "", colnames(.))) %>% 
      mutate(across(everything(), as.numeric)) %>%
      mutate(across(everything(), ~if_else(is.nan(.), NA, .))) %>% 
      suppressWarnings()
    
    
    test <- suppressWarnings(as.integer(colnames(out)))
    test <- test[!is.na(test)]
    
    if(any(test > 19)) {
      
      out <- out %>% 
        pivot_longer(cols = -Year) %>% 
        mutate(name = as.integer(name)) %>% 
        mutate(name = if_else(name > 19, 19, name)) %>% 
        pivot_wider(values_fn = ~ sum(.x, na.rm = TRUE))  %>% 
        # mutate(across(everything(), ~if_else(. == 0, NA, .))) # remove 0s
        column_to_rownames("Year") %>% 
        select(where(~!all(is.na(.x)))) %>% 
        as.matrix()
      
      
    } else {
      out <- out %>% column_to_rownames("Year") %>% 
        select(where(~!all(is.na(.x)))) %>% 
        as.matrix()
    }
    
    attr(out, "time") <- 
      case_when(k == "EcosystemSurvey" ~ rep(9/12, 2),
                k == "WinterSurvey" ~ rep(2/12, 2),
                k == "WGIDEEPS" ~ rep(7/12, 2),
                k == "RussianSurvey" ~ rep(9/12, 2) # find correct time here
      )
    
    attr(out, "twofirst") <- c(1,1)
    
    return(out)
  }), survey_names)


## ####

lapply(seq_along(surveys), function(i) {
  as_tibble(surveys[[i]], rownames = "year") %>% 
    pivot_longer(-year) %>% 
    add_column(type = names(surveys)[i], .before = 1)
}) %>% bind_rows() %>% 
  mutate(
    name = 
      factor(name, 
             rev(as.integer(unique(name)))),
    year = as.integer(year)) %>% 
  ggplot(aes(x = year, y = value, fill = name)) +
  geom_col() +
  facet_wrap(~type, ncol = 1, scales = "free_y") +
  scale_fill_viridis_d() +
  scale_y_continuous(expand = expansion(mult = c(0, .1))) +
  labs(x = "Year", y = "Index", fill = "Age")

## ####
```

### Maturity

```{r}
#| label: fig-maturity
#| fig-cap: Maturity proportions in the data. The proportions are assumed similar for all years.
#| fig-height: 4

### Maturity proportion ####

mo <- read_table("data/from scaa model/MaturityAtAge.txt",
                 show_col_types = FALSE) %>% 
  column_to_rownames("Year") %>% 
  setNames(gsub("\\+", "", colnames(.))) %>% 
  dplyr::select(-`0`, -`1`) %>% 
  as.matrix()

## ####

mo %>% 
  as_tibble(rownames = "year") %>% 
  pivot_longer(-year) %>% 
  mutate(name = as.integer(name),
         year = as.integer(year)) %>% 
  ggplot(aes(name, value, color = year, group = year)) +
  geom_path() +
  scale_color_viridis_c(direction = -1) +
  scale_x_continuous(
    limits = c(0,round(as.integer(colnames(mo)[length(colnames(mo))])/10)*10), 
    expand = c(0,0)) +
  scale_y_continuous(expand = expansion(mult = c(0, .1))) +
  labs(x = "Age", y = "Maturity proportion", color = "Age") +
  theme(legend.position = "bottom")

## ####
```

### Weight

```{r}
#| label: fig-weight-at-age
#| fig-cap: Weight at age data. The proportions are assumed similar for all years.
#| fig-height: 4

### Weight at age ####

sw <- read_table("data/from scaa model/WeightAtAge.txt",
                 show_col_types = FALSE) %>% 
  column_to_rownames("Year") %>% 
  setNames(gsub("\\+", "", colnames(.))) %>% 
  dplyr::select(-`0`, -`1`) %>% 
  as.matrix()

## ####

sw %>%
  as_tibble(rownames = "year") %>%
  pivot_longer(-year) %>%
  mutate(name = as.integer(name),
         year = as.integer(year)) %>%
  ggplot(aes(name, value, color = year, group = year)) +
  geom_path() +
  scale_color_viridis_c(direction = -1) +
  scale_y_continuous(expand = expansion(mult = c(0, .1))) +
  scale_x_continuous(
    limits = c(0,round(as.integer(colnames(sw)[length(colnames(sw))])/10)*10),
    expand = c(0,0)) +
  labs(x = "Age", y = "Weight (kg)", color = "Age") +
  theme(legend.position = "bottom")

## ####
```

### Natural mortality

```{r}
M <- exp(-3)

nm <- mo
nm[nm != M] <- M
```

Natural mortality was assumed as `r round(M, 3)` for all age groups and years. The value comes from the SCAA model (`exp(-3)`).

### Proportion females and males

The `prop.f` and `prop.m` arguments are misleading as one would think that they define the proportion of sexes in the datasets. This, however, does not seem to be the case. According to A. Nielsen, these matrices are only used to calculate SSB and define the spawning time during the year with 0 being the beginning of the year and 1 the end of the year. In other words:

$$SSB = \sum_{a=1}^{A} stock.weight_a \times prop.mature_a \times N_a \times exp(-prob.f_a \times F_a-prob.m \times M_a)$$

In the initial run, these matrices were set to 0 indicating that spawning happened at the beginning of the year.

### Landing fraction

The `land.frac` matrix defines the fraction of the catch which was landed (i.e a way to define the proportion of discards). For the initial SAM run, it was assumed that all catch was landed. 

### Dummy datasets

These dummy datasets contain only 0s (`dummy0`) or 1s (`dummy1`) encompassing the ages and years in the other datasets. They were used in the model where datasets with only 0s or 1s were needed. 

```{r}
# #| label: tbl-dummy
# #| tbl-cap: Dummy dataset containing zeros.

dummy0 <- mo
dummy0[dummy0 != 0] <- 0

dummy1 <- dummy0
dummy1[dummy1 == 0] <- 1

# make_table(dummy0)
```

## Dataset dimensions

The dimensions of the datasets define the number of years (rows) and age groups (columns) used in the model

```{r}
#| label: tbl-data-dim
#| tbl-cap: Dataset dimensions influencing the automatic setup of SAM model during the following steps.

tmp_fun <- function(x, i, name = NULL) {
  tibble(
    type = name,
    subtype = names(x)[i],
    rows = nrow(x[[i]]),
    columns = ncol(x[[i]]),
    year_range = paste0(rownames(x[[i]])[1], "-", rownames(x[[i]])[nrow(x[[i]])]),
    age_range = paste0(colnames(x[[i]])[1], "-", colnames(x[[i]])[ncol(x[[i]])])
    )
}

bind_rows(
lapply(seq_along(cn), function(i) tmp_fun(cn, i, "catches")) %>% 
  bind_rows(),
lapply(seq_along(surveys), function(i) tmp_fun(surveys, i, "surveys")) %>% 
  bind_rows(),
tmp_fun(list(mo), 1, "maturity"),
tmp_fun(list(sw), 1, "weight-at-age"),
tmp_fun(list(nm), 1, "M"),
tmp_fun(list(dummy0), 1, "dummy0"),
tmp_fun(list(dummy1), 1, "dummy1")
) %>% 
  make_table()
```


# SAM

## Setup SAM

The current SAM data setup:

```{r samsetup}
#| code-fold: show

dat <- setup.sam.data(
  surveys = surveys,
  residual.fleets = cn, 
  prop.mature = mo, 
  stock.mean.weight = sw, 
  catch.mean.weight = sw, 
  dis.mean.weight = sw, 
  land.mean.weight = sw,
  prop.f = dummy0, 
  prop.m = dummy0, 
  natural.mortality = nm, 
  land.frac = dummy1
)
```

At the moment, the parameter setup is as simple as possible and has to be improved:

```{r confsam}
#| code-fold: show
conf <- stockassessment::defcon(dat)

# conf$keyLogFpar[conf$keyLogFpar != -1] <- 0

# conf$keyLogFpar <- matrix(c(rep(-1, ncol(conf$keyLogFpar)*2), rep(0, ncol(conf$keyLogFpar)*4)), byrow = TRUE, ncol = ncol(conf$keyLogFpar))

conf
```

Initial model parameters:

```{r initialpar}
#| code-fold: show
par <- stockassessment::defpar(dat, conf)

par
```

## Fit the model

Once all the parameters and data are set up, fitting the model is as simple as:

```{r}
#| code-fold: show
#| eval: false

fit <- sam.fit(dat, conf, par)
```


```{r fitsam}
#| echo: false
#| results: hide

fit <- sam.fit(dat, conf, par, silent = TRUE)
```

Model convergence:

```{r echo = TRUE, collapse=FALSE}
fit
```

## Model parameters

```{r}
#| label: tbl-model-parameters
#| tbl-cap: SAM model parameters. The par column gives the estimated value, sd(par) the standard deviation, exp(par), Low and High the model parameter toget

partable(fit) %>% 
  as_tibble(rownames = "parameter") %>% 
  make_table(digits = 2)
```

# References
